#!/usr/bin/python
"""
Runs a squid instance to cache TKLBAM's duplicity archives
Arguments:

    <http_port>         [hostname:]port (e.g., 3128, 127.0.0.1:33128)
    <cachesize>         Size of squid cache (in megabytes)

Environment variables:

    TKLBAM_SQUID_CACHE_DIR      location of cache dir (default: %s)
    TKLBAM_SQUID_USER           user under which we execute squid (default: %s)
    TKLBAM_SQUID_BIN            path to tklbam squid binary (default: %s)

"""

import os
import sys
import string

from executil import system
from temp import TempFile

import pwd

TKLBAM_SQUID_BIN = "/usr/lib/tklbam/deps"
TKLBAM_SQUID_CACHE_DIR = "/var/spool/tklbam-squid"
TKLBAM_SQUID_USER = "proxy"
TKLBAM_SQUID_BIN = "/usr/lib/tklbam/deps/usr/sbin/squid"

TKLBAM_CONF_TPL = \
"""
# autogenerated file, do not edit

cache_dir ufs $CACHE_DIR $CACHE_SIZE 16 256
maximum_object_size $MAXIMUM_OBJECT_SIZE MB

# static

http_port $HTTP_PORT
icp_port 0

acl all src all
acl localhost src 127.0.0.1/32

http_access allow localhost
http_access deny all

cache_mem 0 MB
maximum_object_size_in_memory 0 KB

refresh_pattern -i duplicity.*\.gpg$$ 86400 90% 604800 ignore-auth

cache_log /dev/null
access_log none
cache_store_log none
pid_filename none
netdb_filename none
"""

class Error(Exception):
    pass

def usage(e=None):
    if e:   
        print >> sys.stderr, "error: " + str(e)
    print >> sys.stderr, "Syntax: %s <http_port> <cache_size>" % sys.argv[0]
    print >> sys.stderr, __doc__.strip() % (TKLBAM_SQUID_CACHE_DIR, TKLBAM_SQUID_USER, TKLBAM_SQUID_BIN)
    sys.exit(1)

def runas(user, command):
    if pwd.getpwnam(user).pw_uid == os.getuid():
        system(command)
    else:
        system("su %s -c" % user, command)

def fatal(e):
    print >> sys.stderr, "error: " + str(e)
    sys.exit(1)

def main():
    args = sys.argv[1:]
    if len(args) != 2:
        usage("incorrect number of arguments")

    http_port = args[0]

    try:
        cache_size = int(args[1])
    except ValueError:
        usage("bad cache_size '%s'" % args[1])

    cache_dir = os.environ.get('TKLBAM_SQUID_CACHE_DIR', TKLBAM_SQUID_CACHE_DIR)
    if not os.path.isdir(cache_dir):
        usage("'%s' - no such directory" % cache_dir)

    user = os.environ.get('TKLBAM_SQUID_USER', TKLBAM_SQUID_USER)
    try:
        pwd.getpwnam(user)
    except KeyError:
        fatal("no such user '%s'" % user)
    
    conf_tpl = string.Template(TKLBAM_CONF_TPL)

    if cache_size > 2000 and (not sys.maxsize > 2 ** 32):
        print >> sys.stderr, "Detected 32-bit system, limiting maximum_object_size to 2000 MB"
        maximum_object_size = 2000
    else:
        maximum_object_size = cache_size

    conf = conf_tpl.substitute(HTTP_PORT=http_port, 
                               CACHE_DIR=cache_dir, 
                               CACHE_SIZE=cache_size + 16, 
                               MAXIMUM_OBJECT_SIZE=maximum_object_size) 

    conf_tmp = TempFile("tklbam-squid-conf-")
    file(conf_tmp.path, "w").write(conf)
    os.chmod(conf_tmp.path, 0644)

    squid_bin = os.environ.get('TKLBAM_SQUID_BIN', TKLBAM_SQUID_BIN)
    runas(user, "%s -f %s -z" % (squid_bin, conf_tmp.path))
    runas(user, "%s -f %s -N -d 1" % (squid_bin, conf_tmp.path))

if __name__ == "__main__":
    main()
